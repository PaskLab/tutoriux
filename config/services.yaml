# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    project_title: Tutoriux
    algolia.app.id: JT5Q3HU3DP
    algolia.app.api_key: 8862b7379729d0a9ad4ea999cf109781
    algolia.indexer.class: App\Library\Indexer
    google_analytics_id: UA-106183386-1
    facebook_app_id: 418290478567896
    liip_imagine.data_root:
        - '%env(LIIP_IMAGINE_DATA_ROOT)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Library,Repository,Form,DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Library\BaseController:
        arguments: ['@App\Services\ApplicationCore']
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Public

#    App\Services\DoctrineInit:
#        public: true

    # Private

    App\Services\ApplicationCore:
        autowire: true
        calls:
            - ['setDoctrineInit', ['@App\Services\DoctrineInitCallable']]

    App\Routing\MappingDirectoryLoader:
        arguments: ['@file_locator']
        tags: [routing.loader]

    App\Routing\MappingYamlFileLoader:
        arguments: ['@file_locator', '@database_connection']
        tags: [routing.loader]

    App\Listeners\DoctrineSubscriber:
        arguments: ['@App\Services\DoctrineInit']
        tags: [doctrine.event_subscriber]

    App\Services\LocaleSwitcher:
        autowire: true
        calls:
            - ['setCacheAdapter', ['@cache.app']]


    # Twig Extension

    Twig\Extensions\TextExtension:
        tags: [{ name: twig.extension }]

    Twig\Extensions\IntlExtension:
        tags: [{ name: twig.extension }]

    Salavert\Twig\Extension\TimeAgoExtension:
        arguments: ['@translator']
        tags: [{ name: twig.extension }]

    # Deletable Listener

    system.deletable:
        class: App\Services\Deletable

    App\Listeners\UserDeletableListener:
        arguments: [ "@security.token_storage" ]
        tags:
            - { name: system.deletable, entity: App\Entity\User }

    App\Listeners\RoleDeletableListener:
        tags:
            - { name: system.deletable, entity: App\Entity\Role }

    App\Listeners\SectionDeletableListener:
        tags:
            - { name: system.deletable, entity: App\Entity\Section }

    # Defined multiple time so we can change the namespace. Might be a bug with doctrine
    # Workaround to force doctrine namespace on redis cache while using symfony TraceableAdapter (cache pool)
    doctrine.metadata_cache_driver:
        class: Symfony\Component\Cache\DoctrineProvider
        arguments: ['@cache.pool.doctrine_system']
        calls:
            - [setNamespace, ['dmc']]
    doctrine.query_cache_driver:
        class: Symfony\Component\Cache\DoctrineProvider
        arguments: ['@cache.pool.doctrine_system']
        calls:
            - [setNamespace, ['dqc']]
    doctrine.result_cache_driver:
        class: Symfony\Component\Cache\DoctrineProvider
        arguments: ['@cache.pool.doctrine_result']
        calls:
            - [setNamespace, ['drc']]
    doctrine.second_level_cache:
        class: Symfony\Component\Cache\DoctrineProvider
        arguments: ['@cache.pool.doctrine_second_level']
        calls:
            - [setNamespace, ['dslc']]

    # Autowire alias
    Tutoriux\DoctrineBehaviorsBundle\ORM\Metadatable\MetadatableGetter: '@doctrine_behaviors.metadatable_getter'
    Liip\ImagineBundle\Service\FilterService: '@liip_imagine.service.filter'
    Liip\ImagineBundle\Imagine\Data\DataManager: '@liip_imagine.data.manager'
    Liip\ImagineBundle\Imagine\Cache\SignerInterface: '@liip_imagine.cache.signer'