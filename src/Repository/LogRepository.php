<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository,
    Doctrine\ORM\NoResultException;

/**
 * LogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogRepository extends EntityRepository
{
    /**
     * @param User $user
     * @param null $filter
     * @return mixed
     */
    public function getCount(User $user, $filter = null)
    {
        $queryBuilder  = $this->createQueryBuilder('l');

        if ('personal' == $filter) {
            return $queryBuilder
                ->select($queryBuilder->expr()->count('l'))
                ->innerJoin('l.user', 'lu')
                ->where('lu.id = :userId')
                ->setParameter('userId', $user->getId())
                ->getQuery()->getSingleScalarResult();
        }


        return $queryBuilder
            ->select($queryBuilder->expr()->countDistinct('l.id'))
            ->innerJoin('l.user', 'lu')
            ->leftJoin('lu.followers', 'uf')
            ->where('lu.id = :userId OR (uf.id = :userId AND l.public = TRUE)')
            ->setParameter('userId', $user->getId())
            ->getQuery()->getSingleScalarResult();
    }

    /**
     * @param User $user
     * @param $length
     * @param $page
     * @return array
     */
    public function findAllLogs(User $user, $length, $page)
    {
        $offset = ($page - 1) * $length;

        return $this->createQueryBuilder('l')
            ->select('l')
            ->innerJoin('l.user', 'lu')
            ->leftJoin('lu.followers', 'uf')
            ->where('lu.id = :userId OR (uf.id = :userId AND l.public = TRUE)')
            ->setParameter('userId', $user->getId())
            ->orderBy('l.createdAt', 'DESC')
            ->setFirstResult($offset)
            ->setMaxResults($length)
            ->distinct(true)
            ->getQuery()->getResult();
    }
}
