<?php

namespace App\Repository;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\NonUniqueResultException;
use App\Entity\User;
use App\Entity\Role;
use App\Library\BaseEntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends BaseEntityRepository implements UserProviderInterface
{
    /**
     * Load user by username
     *
     * @param string $username The Username
     *
     * @return object
     */
    public function loadUserByUsername($username)
    {
        return $this->findOneBy(array('username' => $username, 'active' => 1));
    }

    /**
     * Refresh User
     *
     * @param UserInterface $user The User Interface
     *
     * @throws UnsupportedUserException
     *
     * @return object
     */
    public function refreshUser(UserInterface $user)
    {
        if (!$user instanceof User) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', get_class($user)));
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    /**
     * Supports Class
     *
     * @param string $class The class
     *
     * @return boolean
     */
    public function supportsClass($class)
    {
        return $class === 'SystemBundle\Entity\User';
    }

    /**
     * @param $userId
     * @param $saltedHash
     * @param bool $checkActive
     * @return object|null
     */
    public function findByIdAndHash($userId, $saltedHash, $checkActive = true)
    {
        if ($checkActive) {
            $user = $this->findOneBy(array(
                'id' => $userId,
                'active' => true
            ));
        } else {
            $user = $this->find($userId);
        }

        if ($user) {
            if ($saltedHash == $user->getSaltedHash()) {
                return $user;
            }
        }

        return null;
    }

    /**
     * @param $role
     * @return QueryBuilder|mixed
     * @throws NonUniqueResultException
     */
    public function findByRole(Role $role)
    {
        $queryBuilder = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.roles', 'r')
            ->where('r.id = :role_id')
            ->setParameter('role_id', $role->getId())
            ->orderBy('u.lastname', 'ASC');

        return $this->processQuery($queryBuilder);
    }

    /**
     * @param array $parameters
     * @param $locale
     * @return array
     * @throws NonUniqueResultException
     */
    public function dataTableResult(array $parameters, $locale)
    {
        $MAX_ALIAS_LENGTH = 4;

        $queryBuilderBase = $this->createQueryBuilder('u');

        // Initial
        $queryBuilderBase->where('u.active = true');

        $queryBuilder = clone $queryBuilderBase;

        $queryBuilder->select('u', 'ur', 'urt')
            ->leftJoin('u.roles', 'ur')
            ->leftJoin('ur.translations', 'urt')
            ->andWhere('urt.locale = :locale')
            ->setParameter('locale', $locale)
            ->distinct(true);

        $mapping = [
            0 => 'COALESCE(NULLIF(CONCAT(CONCAT(u.firstname, '
                .$queryBuilder->expr()->literal(' ').'), u.lastname), '
                .$queryBuilder->expr()->literal(' ').'), u.username)',
            1 => 'urt.name'
        ];

        // add alias for expressions
        foreach ($mapping as $key => $expr) {
            if (strpos($expr, '.') > $MAX_ALIAS_LENGTH) {
                $queryBuilder->addSelect($mapping[$key].' as alias_'.$key);
            }
        }

        // Search parameter
        if (isset($parameters['search']) && $parameters['search']['value'] != '') {

            $andWhere = '';

            foreach ($parameters['columns'] as $key => $column) {
                if ($column['searchable'] === 'true') {
                    $andWhere .= ((empty($andWhere)) ? '' : ' OR ')
                        . 'LOWER(' . $mapping[(int) $column['data']] . ') LIKE :search_value';
                }
            }

            $queryBuilder
                ->andWhere($andWhere)
                ->setParameter('search_value', '%'.mb_strtolower($parameters['search']['value'], 'UTF-8').'%');
        }

        // Order parameter
        if (isset($parameters['order'])) {
            foreach ($parameters['order'] as $column) {

                $field = $mapping[(int) $column['column']];

                if (strpos($field, '.') > $MAX_ALIAS_LENGTH) {
                    $field = 'alias_' . (int) $column['column'];
                }

                $queryBuilder->orderBy($field, $column['dir']);
            }
        } else {
            $queryBuilder->orderBy('alias_0', 'ASC');
        }

        // Limit and offset parameter
        $queryBuilder
            ->setFirstResult((int) $parameters['start'])
            ->setMaxResults((int) $parameters['length']);

        $results = $queryBuilder->getQuery()->getResult();

        // Insure standardization of results
        foreach ($results as $key => $result) {
            if (false == is_object($results)) {
                $results[$key] = $result[0];
            }
        }

        // recordsTotal count
        $queryBuilderBase->select('COUNT(u)');
        $recordsTotal = $queryBuilderBase->getQuery()->getSingleScalarResult();

        return [
            'draw' => (int) $parameters['draw'],
            'recordsTotal' => $recordsTotal,
            'recordsFiltered' => count($results),
            'data' => $results
        ];
    }
}